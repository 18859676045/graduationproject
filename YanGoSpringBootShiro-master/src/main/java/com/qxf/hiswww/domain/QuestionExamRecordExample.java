package com.qxf.hiswww.domain;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class QuestionExamRecordExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public QuestionExamRecordExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public QuestionExamRecordExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public QuestionExamRecordExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        QuestionExamRecordExample example = new QuestionExamRecordExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public QuestionExamRecordExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public QuestionExamRecordExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("id like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("id not like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<String> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<String> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andExamIdIsNull() {
            addCriterion("exam_id is null");
            return (Criteria) this;
        }

        public Criteria andExamIdIsNotNull() {
            addCriterion("exam_id is not null");
            return (Criteria) this;
        }

        public Criteria andExamIdEqualTo(String value) {
            addCriterion("exam_id =", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdNotEqualTo(String value) {
            addCriterion("exam_id <>", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdGreaterThan(String value) {
            addCriterion("exam_id >", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdGreaterThanOrEqualTo(String value) {
            addCriterion("exam_id >=", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdLessThan(String value) {
            addCriterion("exam_id <", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdLessThanOrEqualTo(String value) {
            addCriterion("exam_id <=", value, "examId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andExamIdLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("exam_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamIdLike(String value) {
            addCriterion("exam_id like", value, "examId");
            return (Criteria) this;
        }

        public Criteria andExamIdNotLike(String value) {
            addCriterion("exam_id not like", value, "examId");
            return (Criteria) this;
        }

        public Criteria andExamIdIn(List<String> values) {
            addCriterion("exam_id in", values, "examId");
            return (Criteria) this;
        }

        public Criteria andExamIdNotIn(List<String> values) {
            addCriterion("exam_id not in", values, "examId");
            return (Criteria) this;
        }

        public Criteria andExamIdBetween(String value1, String value2) {
            addCriterion("exam_id between", value1, value2, "examId");
            return (Criteria) this;
        }

        public Criteria andExamIdNotBetween(String value1, String value2) {
            addCriterion("exam_id not between", value1, value2, "examId");
            return (Criteria) this;
        }

        public Criteria andJoinIdIsNull() {
            addCriterion("join_id is null");
            return (Criteria) this;
        }

        public Criteria andJoinIdIsNotNull() {
            addCriterion("join_id is not null");
            return (Criteria) this;
        }

        public Criteria andJoinIdEqualTo(String value) {
            addCriterion("join_id =", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdNotEqualTo(String value) {
            addCriterion("join_id <>", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdGreaterThan(String value) {
            addCriterion("join_id >", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdGreaterThanOrEqualTo(String value) {
            addCriterion("join_id >=", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdLessThan(String value) {
            addCriterion("join_id <", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdLessThanOrEqualTo(String value) {
            addCriterion("join_id <=", value, "joinId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinIdLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinIdLike(String value) {
            addCriterion("join_id like", value, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinIdNotLike(String value) {
            addCriterion("join_id not like", value, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinIdIn(List<String> values) {
            addCriterion("join_id in", values, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinIdNotIn(List<String> values) {
            addCriterion("join_id not in", values, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinIdBetween(String value1, String value2) {
            addCriterion("join_id between", value1, value2, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinIdNotBetween(String value1, String value2) {
            addCriterion("join_id not between", value1, value2, "joinId");
            return (Criteria) this;
        }

        public Criteria andJoinDateIsNull() {
            addCriterion("join_date is null");
            return (Criteria) this;
        }

        public Criteria andJoinDateIsNotNull() {
            addCriterion("join_date is not null");
            return (Criteria) this;
        }

        public Criteria andJoinDateEqualTo(LocalDate value) {
            addCriterion("join_date =", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateNotEqualTo(LocalDate value) {
            addCriterion("join_date <>", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateGreaterThan(LocalDate value) {
            addCriterion("join_date >", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateGreaterThanOrEqualTo(LocalDate value) {
            addCriterion("join_date >=", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateLessThan(LocalDate value) {
            addCriterion("join_date <", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateLessThanOrEqualTo(LocalDate value) {
            addCriterion("join_date <=", value, "joinDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinDateLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_date <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinDateIn(List<LocalDate> values) {
            addCriterion("join_date in", values, "joinDate");
            return (Criteria) this;
        }

        public Criteria andJoinDateNotIn(List<LocalDate> values) {
            addCriterion("join_date not in", values, "joinDate");
            return (Criteria) this;
        }

        public Criteria andJoinDateBetween(LocalDate value1, LocalDate value2) {
            addCriterion("join_date between", value1, value2, "joinDate");
            return (Criteria) this;
        }

        public Criteria andJoinDateNotBetween(LocalDate value1, LocalDate value2) {
            addCriterion("join_date not between", value1, value2, "joinDate");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostIsNull() {
            addCriterion("join_time_cost is null");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostIsNotNull() {
            addCriterion("join_time_cost is not null");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostEqualTo(Integer value) {
            addCriterion("join_time_cost =", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostNotEqualTo(Integer value) {
            addCriterion("join_time_cost <>", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostGreaterThan(Integer value) {
            addCriterion("join_time_cost >", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostGreaterThanOrEqualTo(Integer value) {
            addCriterion("join_time_cost >=", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostLessThan(Integer value) {
            addCriterion("join_time_cost <", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostLessThanOrEqualTo(Integer value) {
            addCriterion("join_time_cost <=", value, "joinTimeCost");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinTimeCostLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_time_cost <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostIn(List<Integer> values) {
            addCriterion("join_time_cost in", values, "joinTimeCost");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostNotIn(List<Integer> values) {
            addCriterion("join_time_cost not in", values, "joinTimeCost");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostBetween(Integer value1, Integer value2) {
            addCriterion("join_time_cost between", value1, value2, "joinTimeCost");
            return (Criteria) this;
        }

        public Criteria andJoinTimeCostNotBetween(Integer value1, Integer value2) {
            addCriterion("join_time_cost not between", value1, value2, "joinTimeCost");
            return (Criteria) this;
        }

        public Criteria andJoinScoreIsNull() {
            addCriterion("join_score is null");
            return (Criteria) this;
        }

        public Criteria andJoinScoreIsNotNull() {
            addCriterion("join_score is not null");
            return (Criteria) this;
        }

        public Criteria andJoinScoreEqualTo(Integer value) {
            addCriterion("join_score =", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreNotEqualTo(Integer value) {
            addCriterion("join_score <>", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreGreaterThan(Integer value) {
            addCriterion("join_score >", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreGreaterThanOrEqualTo(Integer value) {
            addCriterion("join_score >=", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreLessThan(Integer value) {
            addCriterion("join_score <", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreLessThanOrEqualTo(Integer value) {
            addCriterion("join_score <=", value, "joinScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinScoreLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_score <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinScoreIn(List<Integer> values) {
            addCriterion("join_score in", values, "joinScore");
            return (Criteria) this;
        }

        public Criteria andJoinScoreNotIn(List<Integer> values) {
            addCriterion("join_score not in", values, "joinScore");
            return (Criteria) this;
        }

        public Criteria andJoinScoreBetween(Integer value1, Integer value2) {
            addCriterion("join_score between", value1, value2, "joinScore");
            return (Criteria) this;
        }

        public Criteria andJoinScoreNotBetween(Integer value1, Integer value2) {
            addCriterion("join_score not between", value1, value2, "joinScore");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelIsNull() {
            addCriterion("join_result_level is null");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelIsNotNull() {
            addCriterion("join_result_level is not null");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelEqualTo(Integer value) {
            addCriterion("join_result_level =", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelNotEqualTo(Integer value) {
            addCriterion("join_result_level <>", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelGreaterThan(Integer value) {
            addCriterion("join_result_level >", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelGreaterThanOrEqualTo(Integer value) {
            addCriterion("join_result_level >=", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelLessThan(Integer value) {
            addCriterion("join_result_level <", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelLessThanOrEqualTo(Integer value) {
            addCriterion("join_result_level <=", value, "joinResultLevel");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinResultLevelLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_result_level <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelIn(List<Integer> values) {
            addCriterion("join_result_level in", values, "joinResultLevel");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelNotIn(List<Integer> values) {
            addCriterion("join_result_level not in", values, "joinResultLevel");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelBetween(Integer value1, Integer value2) {
            addCriterion("join_result_level between", value1, value2, "joinResultLevel");
            return (Criteria) this;
        }

        public Criteria andJoinResultLevelNotBetween(Integer value1, Integer value2) {
            addCriterion("join_result_level not between", value1, value2, "joinResultLevel");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillIsNull() {
            addCriterion("join_answer_fill is null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillIsNotNull() {
            addCriterion("join_answer_fill is not null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillEqualTo(String value) {
            addCriterion("join_answer_fill =", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillNotEqualTo(String value) {
            addCriterion("join_answer_fill <>", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillGreaterThan(String value) {
            addCriterion("join_answer_fill >", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillGreaterThanOrEqualTo(String value) {
            addCriterion("join_answer_fill >=", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillLessThan(String value) {
            addCriterion("join_answer_fill <", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillLessThanOrEqualTo(String value) {
            addCriterion("join_answer_fill <=", value, "joinAnswerFill");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerFillLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_fill <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillLike(String value) {
            addCriterion("join_answer_fill like", value, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillNotLike(String value) {
            addCriterion("join_answer_fill not like", value, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillIn(List<String> values) {
            addCriterion("join_answer_fill in", values, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillNotIn(List<String> values) {
            addCriterion("join_answer_fill not in", values, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillBetween(String value1, String value2) {
            addCriterion("join_answer_fill between", value1, value2, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerFillNotBetween(String value1, String value2) {
            addCriterion("join_answer_fill not between", value1, value2, "joinAnswerFill");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeIsNull() {
            addCriterion("join_answer_judge is null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeIsNotNull() {
            addCriterion("join_answer_judge is not null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeEqualTo(String value) {
            addCriterion("join_answer_judge =", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeNotEqualTo(String value) {
            addCriterion("join_answer_judge <>", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeGreaterThan(String value) {
            addCriterion("join_answer_judge >", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeGreaterThanOrEqualTo(String value) {
            addCriterion("join_answer_judge >=", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeLessThan(String value) {
            addCriterion("join_answer_judge <", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeLessThanOrEqualTo(String value) {
            addCriterion("join_answer_judge <=", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerJudgeLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_judge <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeLike(String value) {
            addCriterion("join_answer_judge like", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeNotLike(String value) {
            addCriterion("join_answer_judge not like", value, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeIn(List<String> values) {
            addCriterion("join_answer_judge in", values, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeNotIn(List<String> values) {
            addCriterion("join_answer_judge not in", values, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeBetween(String value1, String value2) {
            addCriterion("join_answer_judge between", value1, value2, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerJudgeNotBetween(String value1, String value2) {
            addCriterion("join_answer_judge not between", value1, value2, "joinAnswerJudge");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleIsNull() {
            addCriterion("join_answer_single is null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleIsNotNull() {
            addCriterion("join_answer_single is not null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleEqualTo(String value) {
            addCriterion("join_answer_single =", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleNotEqualTo(String value) {
            addCriterion("join_answer_single <>", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleGreaterThan(String value) {
            addCriterion("join_answer_single >", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleGreaterThanOrEqualTo(String value) {
            addCriterion("join_answer_single >=", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleLessThan(String value) {
            addCriterion("join_answer_single <", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleLessThanOrEqualTo(String value) {
            addCriterion("join_answer_single <=", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerSingleLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_single <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleLike(String value) {
            addCriterion("join_answer_single like", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleNotLike(String value) {
            addCriterion("join_answer_single not like", value, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleIn(List<String> values) {
            addCriterion("join_answer_single in", values, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleNotIn(List<String> values) {
            addCriterion("join_answer_single not in", values, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleBetween(String value1, String value2) {
            addCriterion("join_answer_single between", value1, value2, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerSingleNotBetween(String value1, String value2) {
            addCriterion("join_answer_single not between", value1, value2, "joinAnswerSingle");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleIsNull() {
            addCriterion("join_answer_multiple is null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleIsNotNull() {
            addCriterion("join_answer_multiple is not null");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleEqualTo(String value) {
            addCriterion("join_answer_multiple =", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleNotEqualTo(String value) {
            addCriterion("join_answer_multiple <>", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleNotEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleGreaterThan(String value) {
            addCriterion("join_answer_multiple >", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleGreaterThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleGreaterThanOrEqualTo(String value) {
            addCriterion("join_answer_multiple >=", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleGreaterThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleLessThan(String value) {
            addCriterion("join_answer_multiple <", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleLessThanColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleLessThanOrEqualTo(String value) {
            addCriterion("join_answer_multiple <=", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria andJoinAnswerMultipleLessThanOrEqualToColumn(QuestionExamRecord.Column column) {
            addCriterion(new StringBuilder("join_answer_multiple <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleLike(String value) {
            addCriterion("join_answer_multiple like", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleNotLike(String value) {
            addCriterion("join_answer_multiple not like", value, "joinAnswerMultiple");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleIn(List<String> values) {
            addCriterion("join_answer_multiple in", values, "joinAnswerMultiple");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleNotIn(List<String> values) {
            addCriterion("join_answer_multiple not in", values, "joinAnswerMultiple");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleBetween(String value1, String value2) {
            addCriterion("join_answer_multiple between", value1, value2, "joinAnswerMultiple");
            return (Criteria) this;
        }

        public Criteria andJoinAnswerMultipleNotBetween(String value1, String value2) {
            addCriterion("join_answer_multiple not between", value1, value2, "joinAnswerMultiple");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam_record
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        private QuestionExamRecordExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        protected Criteria(QuestionExamRecordExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public QuestionExamRecordExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table question_exam_record
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam_record
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam_record
         *
         * @mbg.generated
         */
        void example(com.qxf.hiswww.domain.QuestionExamRecordExample example);
    }
}