package com.qxf.hiswww.domain;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class QuestionExamExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public QuestionExamExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public QuestionExamExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public QuestionExamExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        QuestionExamExample example = new QuestionExamExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public QuestionExamExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public QuestionExamExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("id like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("id not like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<String> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<String> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andExamDescIsNull() {
            addCriterion("exam_desc is null");
            return (Criteria) this;
        }

        public Criteria andExamDescIsNotNull() {
            addCriterion("exam_desc is not null");
            return (Criteria) this;
        }

        public Criteria andExamDescEqualTo(String value) {
            addCriterion("exam_desc =", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescNotEqualTo(String value) {
            addCriterion("exam_desc <>", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescGreaterThan(String value) {
            addCriterion("exam_desc >", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescGreaterThanOrEqualTo(String value) {
            addCriterion("exam_desc >=", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescLessThan(String value) {
            addCriterion("exam_desc <", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescLessThanOrEqualTo(String value) {
            addCriterion("exam_desc <=", value, "examDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDescLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_desc <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDescLike(String value) {
            addCriterion("exam_desc like", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotLike(String value) {
            addCriterion("exam_desc not like", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescIn(List<String> values) {
            addCriterion("exam_desc in", values, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotIn(List<String> values) {
            addCriterion("exam_desc not in", values, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescBetween(String value1, String value2) {
            addCriterion("exam_desc between", value1, value2, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotBetween(String value1, String value2) {
            addCriterion("exam_desc not between", value1, value2, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamCourseIsNull() {
            addCriterion("exam_course is null");
            return (Criteria) this;
        }

        public Criteria andExamCourseIsNotNull() {
            addCriterion("exam_course is not null");
            return (Criteria) this;
        }

        public Criteria andExamCourseEqualTo(String value) {
            addCriterion("exam_course =", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseNotEqualTo(String value) {
            addCriterion("exam_course <>", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseGreaterThan(String value) {
            addCriterion("exam_course >", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseGreaterThanOrEqualTo(String value) {
            addCriterion("exam_course >=", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseLessThan(String value) {
            addCriterion("exam_course <", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseLessThanOrEqualTo(String value) {
            addCriterion("exam_course <=", value, "examCourse");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamCourseLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_course <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamCourseLike(String value) {
            addCriterion("exam_course like", value, "examCourse");
            return (Criteria) this;
        }

        public Criteria andExamCourseNotLike(String value) {
            addCriterion("exam_course not like", value, "examCourse");
            return (Criteria) this;
        }

        public Criteria andExamCourseIn(List<String> values) {
            addCriterion("exam_course in", values, "examCourse");
            return (Criteria) this;
        }

        public Criteria andExamCourseNotIn(List<String> values) {
            addCriterion("exam_course not in", values, "examCourse");
            return (Criteria) this;
        }

        public Criteria andExamCourseBetween(String value1, String value2) {
            addCriterion("exam_course between", value1, value2, "examCourse");
            return (Criteria) this;
        }

        public Criteria andExamCourseNotBetween(String value1, String value2) {
            addCriterion("exam_course not between", value1, value2, "examCourse");
            return (Criteria) this;
        }

        public Criteria andPaperIdIsNull() {
            addCriterion("paper_id is null");
            return (Criteria) this;
        }

        public Criteria andPaperIdIsNotNull() {
            addCriterion("paper_id is not null");
            return (Criteria) this;
        }

        public Criteria andPaperIdEqualTo(String value) {
            addCriterion("paper_id =", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdNotEqualTo(String value) {
            addCriterion("paper_id <>", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdGreaterThan(String value) {
            addCriterion("paper_id >", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdGreaterThanOrEqualTo(String value) {
            addCriterion("paper_id >=", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdLessThan(String value) {
            addCriterion("paper_id <", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdLessThanOrEqualTo(String value) {
            addCriterion("paper_id <=", value, "paperId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andPaperIdLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("paper_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPaperIdLike(String value) {
            addCriterion("paper_id like", value, "paperId");
            return (Criteria) this;
        }

        public Criteria andPaperIdNotLike(String value) {
            addCriterion("paper_id not like", value, "paperId");
            return (Criteria) this;
        }

        public Criteria andPaperIdIn(List<String> values) {
            addCriterion("paper_id in", values, "paperId");
            return (Criteria) this;
        }

        public Criteria andPaperIdNotIn(List<String> values) {
            addCriterion("paper_id not in", values, "paperId");
            return (Criteria) this;
        }

        public Criteria andPaperIdBetween(String value1, String value2) {
            addCriterion("paper_id between", value1, value2, "paperId");
            return (Criteria) this;
        }

        public Criteria andPaperIdNotBetween(String value1, String value2) {
            addCriterion("paper_id not between", value1, value2, "paperId");
            return (Criteria) this;
        }

        public Criteria andExamDateIsNull() {
            addCriterion("exam_date is null");
            return (Criteria) this;
        }

        public Criteria andExamDateIsNotNull() {
            addCriterion("exam_date is not null");
            return (Criteria) this;
        }

        public Criteria andExamDateEqualTo(LocalDate value) {
            addCriterion("exam_date =", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateNotEqualTo(LocalDate value) {
            addCriterion("exam_date <>", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateGreaterThan(LocalDate value) {
            addCriterion("exam_date >", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateGreaterThanOrEqualTo(LocalDate value) {
            addCriterion("exam_date >=", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateLessThan(LocalDate value) {
            addCriterion("exam_date <", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateLessThanOrEqualTo(LocalDate value) {
            addCriterion("exam_date <=", value, "examDate");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamDateLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_date <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamDateIn(List<LocalDate> values) {
            addCriterion("exam_date in", values, "examDate");
            return (Criteria) this;
        }

        public Criteria andExamDateNotIn(List<LocalDate> values) {
            addCriterion("exam_date not in", values, "examDate");
            return (Criteria) this;
        }

        public Criteria andExamDateBetween(LocalDate value1, LocalDate value2) {
            addCriterion("exam_date between", value1, value2, "examDate");
            return (Criteria) this;
        }

        public Criteria andExamDateNotBetween(LocalDate value1, LocalDate value2) {
            addCriterion("exam_date not between", value1, value2, "examDate");
            return (Criteria) this;
        }

        public Criteria andTotalTimeIsNull() {
            addCriterion("total_time is null");
            return (Criteria) this;
        }

        public Criteria andTotalTimeIsNotNull() {
            addCriterion("total_time is not null");
            return (Criteria) this;
        }

        public Criteria andTotalTimeEqualTo(Integer value) {
            addCriterion("total_time =", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeNotEqualTo(Integer value) {
            addCriterion("total_time <>", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeGreaterThan(Integer value) {
            addCriterion("total_time >", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_time >=", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeLessThan(Integer value) {
            addCriterion("total_time <", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeLessThanOrEqualTo(Integer value) {
            addCriterion("total_time <=", value, "totalTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalTimeLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_time <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalTimeIn(List<Integer> values) {
            addCriterion("total_time in", values, "totalTime");
            return (Criteria) this;
        }

        public Criteria andTotalTimeNotIn(List<Integer> values) {
            addCriterion("total_time not in", values, "totalTime");
            return (Criteria) this;
        }

        public Criteria andTotalTimeBetween(Integer value1, Integer value2) {
            addCriterion("total_time between", value1, value2, "totalTime");
            return (Criteria) this;
        }

        public Criteria andTotalTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("total_time not between", value1, value2, "totalTime");
            return (Criteria) this;
        }

        public Criteria andMajorIsNull() {
            addCriterion("major is null");
            return (Criteria) this;
        }

        public Criteria andMajorIsNotNull() {
            addCriterion("major is not null");
            return (Criteria) this;
        }

        public Criteria andMajorEqualTo(String value) {
            addCriterion("major =", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorNotEqualTo(String value) {
            addCriterion("major <>", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorGreaterThan(String value) {
            addCriterion("major >", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorGreaterThanOrEqualTo(String value) {
            addCriterion("major >=", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorLessThan(String value) {
            addCriterion("major <", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorLessThanOrEqualTo(String value) {
            addCriterion("major <=", value, "major");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andMajorLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("major <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMajorLike(String value) {
            addCriterion("major like", value, "major");
            return (Criteria) this;
        }

        public Criteria andMajorNotLike(String value) {
            addCriterion("major not like", value, "major");
            return (Criteria) this;
        }

        public Criteria andMajorIn(List<String> values) {
            addCriterion("major in", values, "major");
            return (Criteria) this;
        }

        public Criteria andMajorNotIn(List<String> values) {
            addCriterion("major not in", values, "major");
            return (Criteria) this;
        }

        public Criteria andMajorBetween(String value1, String value2) {
            addCriterion("major between", value1, value2, "major");
            return (Criteria) this;
        }

        public Criteria andMajorNotBetween(String value1, String value2) {
            addCriterion("major not between", value1, value2, "major");
            return (Criteria) this;
        }

        public Criteria andInstituteIsNull() {
            addCriterion("institute is null");
            return (Criteria) this;
        }

        public Criteria andInstituteIsNotNull() {
            addCriterion("institute is not null");
            return (Criteria) this;
        }

        public Criteria andInstituteEqualTo(String value) {
            addCriterion("institute =", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteNotEqualTo(String value) {
            addCriterion("institute <>", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteGreaterThan(String value) {
            addCriterion("institute >", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteGreaterThanOrEqualTo(String value) {
            addCriterion("institute >=", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteLessThan(String value) {
            addCriterion("institute <", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteLessThanOrEqualTo(String value) {
            addCriterion("institute <=", value, "institute");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andInstituteLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("institute <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInstituteLike(String value) {
            addCriterion("institute like", value, "institute");
            return (Criteria) this;
        }

        public Criteria andInstituteNotLike(String value) {
            addCriterion("institute not like", value, "institute");
            return (Criteria) this;
        }

        public Criteria andInstituteIn(List<String> values) {
            addCriterion("institute in", values, "institute");
            return (Criteria) this;
        }

        public Criteria andInstituteNotIn(List<String> values) {
            addCriterion("institute not in", values, "institute");
            return (Criteria) this;
        }

        public Criteria andInstituteBetween(String value1, String value2) {
            addCriterion("institute between", value1, value2, "institute");
            return (Criteria) this;
        }

        public Criteria andInstituteNotBetween(String value1, String value2) {
            addCriterion("institute not between", value1, value2, "institute");
            return (Criteria) this;
        }

        public Criteria andTotalScoreIsNull() {
            addCriterion("total_score is null");
            return (Criteria) this;
        }

        public Criteria andTotalScoreIsNotNull() {
            addCriterion("total_score is not null");
            return (Criteria) this;
        }

        public Criteria andTotalScoreEqualTo(Integer value) {
            addCriterion("total_score =", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreNotEqualTo(Integer value) {
            addCriterion("total_score <>", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreGreaterThan(Integer value) {
            addCriterion("total_score >", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_score >=", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreLessThan(Integer value) {
            addCriterion("total_score <", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreLessThanOrEqualTo(Integer value) {
            addCriterion("total_score <=", value, "totalScore");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andTotalScoreLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("total_score <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalScoreIn(List<Integer> values) {
            addCriterion("total_score in", values, "totalScore");
            return (Criteria) this;
        }

        public Criteria andTotalScoreNotIn(List<Integer> values) {
            addCriterion("total_score not in", values, "totalScore");
            return (Criteria) this;
        }

        public Criteria andTotalScoreBetween(Integer value1, Integer value2) {
            addCriterion("total_score between", value1, value2, "totalScore");
            return (Criteria) this;
        }

        public Criteria andTotalScoreNotBetween(Integer value1, Integer value2) {
            addCriterion("total_score not between", value1, value2, "totalScore");
            return (Criteria) this;
        }

        public Criteria andExamTypeIsNull() {
            addCriterion("exam_type is null");
            return (Criteria) this;
        }

        public Criteria andExamTypeIsNotNull() {
            addCriterion("exam_type is not null");
            return (Criteria) this;
        }

        public Criteria andExamTypeEqualTo(Integer value) {
            addCriterion("exam_type =", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeNotEqualTo(Integer value) {
            addCriterion("exam_type <>", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeNotEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeGreaterThan(Integer value) {
            addCriterion("exam_type >", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeGreaterThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("exam_type >=", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeGreaterThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeLessThan(Integer value) {
            addCriterion("exam_type <", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeLessThanColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeLessThanOrEqualTo(Integer value) {
            addCriterion("exam_type <=", value, "examType");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria andExamTypeLessThanOrEqualToColumn(QuestionExam.Column column) {
            addCriterion(new StringBuilder("exam_type <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andExamTypeIn(List<Integer> values) {
            addCriterion("exam_type in", values, "examType");
            return (Criteria) this;
        }

        public Criteria andExamTypeNotIn(List<Integer> values) {
            addCriterion("exam_type not in", values, "examType");
            return (Criteria) this;
        }

        public Criteria andExamTypeBetween(Integer value1, Integer value2) {
            addCriterion("exam_type between", value1, value2, "examType");
            return (Criteria) this;
        }

        public Criteria andExamTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("exam_type not between", value1, value2, "examType");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        private QuestionExamExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        protected Criteria(QuestionExamExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public QuestionExamExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table question_exam
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table question_exam
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table question_exam
         *
         * @mbg.generated
         */
        void example(com.qxf.hiswww.domain.QuestionExamExample example);
    }
}